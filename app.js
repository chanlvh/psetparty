// Generated by IcedCoffeeScript 1.4.0a
(function() {
  var $, app, classdata, classes, classlist, classlist_set, everyone, express, fs, getCalendarId, http, httpserver, iced, line, nowjs, request, restler, subjectnum, __iced_k, __iced_k_noop, _i, _len, _ref;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  request = require('request');

  $ = require('jQuery');

  restler = require('restler');

  express = require('express');

  app = express();

  http = require('http');

  httpserver = http.createServer(app);

  httpserver.listen(3333);

  nowjs = require('now');

  everyone = nowjs.initialize(httpserver);

  app.configure('development', function() {
    return app.use(express.errorHandler());
  });

  app.configure(function() {
    app.set('views', __dirname + '/views');
    app.set('view engine', 'ejs');
    app.use(express.bodyParser());
    app.use(express.methodOverride());
    app.set('view options', {
      layout: false
    });
    app.locals({
      layout: false
    });
    return app.use(express["static"](__dirname + '/'));
  });

  classes = {};

  classlist = [];

  classlist_set = {};

  classdata = fs.readFileSync('classes.txt', 'utf-8');

  _ref = classdata.split('\n');
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    line = _ref[_i];
    if (line.indexOf('\t') === -1) continue;
    subjectnum = line.split('\t')[0];
    if (classlist_set[subjectnum] == null) {
      classlist_set[subjectnum] = true;
      classlist.push(subjectnum);
    }
  }

  classlist.sort();

  everyone.now.addClassType = function(classname) {
    if (typeof classname !== typeof '') return;
    if (classlist_set[classname] == null) {
      classlist_set[classname] = true;
      classlist.push(classname);
      return classlist.sort();
    }
  };

  everyone.now.getClassesWithPrefix = function(prefix, callback) {
    var matches, x;
    matches = (function() {
      var _j, _len1, _results;
      _results = [];
      for (_j = 0, _len1 = classlist.length; _j < _len1; _j++) {
        x = classlist[_j];
        if (x.indexOf(prefix) === 0) _results.push(x);
      }
      return _results;
    })();
    return callback(matches);
  };

  everyone.now.getCalendarId = getCalendarId = function(classname, callback) {
    return restler.get('http://localhost:5000/calid?title=' + classname).on('complete', callback);
  };

  root.classids = {};

  everyone.now.getCalendarIds = function(classnames, callback) {
    var i, title, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      var _j, _len1;
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "app.coffee",
        funcname: "getCalendarIds"
      });
      for (i = _j = 0, _len1 = classnames.length; _j < _len1; i = ++_j) {
        title = classnames[i];
        if (root.classids[title] == null) {
          getCalendarId(title, __iced_deferrals.defer({
            assign_fn: (function(__slot_1, __slot_2) {
              return function() {
                return __slot_1[__slot_2] = arguments[0];
              };
            })(classids, title),
            lineno: 63
          }));
        }
      }
      __iced_deferrals._fulfill();
    })(function() {
      return callback(root.classids);
    });
  };

  everyone.now.getClasses = function(username, callback) {
    if (classes[username] == null) classes[username] = [];
    if (callback != null) return callback(classes[username]);
  };

  everyone.now.addClass = function(username, classname, callback) {
    if (classes[username] == null) classes[username] = [];
    if (classes[username].indexOf(classname) === -1) {
      classes[username].push(classname);
    }
    if (callback != null) return callback(classes[username]);
  };

  everyone.now.removeClass = function(username, classname, callback) {
    var x;
    if (classes[username] == null) classes[username] = [];
    classes[username] = (function() {
      var _j, _len1, _ref1, _results;
      _ref1 = classes[username];
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        x = _ref1[_j];
        if (x !== classname) _results.push(x);
      }
      return _results;
    })();
    if (callback != null) return callback(classes[username]);
  };

}).call(this);
